@testset "Solvers" begin
  data1D = readgeotable(joinpath(datadir,"data1D.tsv"), coordnames=(:x,))
  data2D = readgeotable(joinpath(datadir,"data2D.tsv"), coordnames=(:x,:y))
  grid1D = RegularGrid(100)
  grid2D = RegularGrid(100,100)

  @testset "Kriging1D" begin
    problem = EstimationProblem(data1D, grid1D, :value)

    global_kriging = Kriging(
      :value => (variogram=GaussianVariogram(range=35.,nugget=0.),)
    )
    nearest_kriging = Kriging(
      :value => (variogram=GaussianVariogram(range=35.,nugget=0.), maxneighbors=3)
    )
    local_kriging = Kriging(
      :value => (variogram=GaussianVariogram(range=35.,nugget=0.),
                 maxneighbors=3, neighborhood=BallNeighborhood(100.))
    )

    solvers   = [global_kriging, nearest_kriging, local_kriging]
    solnames  = ["GlobalKriging", "NearestKriging", "LocalKriging"]
    solutions = [solve(problem, solver) for solver in solvers]

    if visualtests
      gr(size=(800,400))
      for i in 1:3
        solution, sname = solutions[i], solnames[i]
        @plottest plot(solution) joinpath(datadir,sname*"1D.png") !istravis
      end
    end
  end

  @testset "GlobalKriging2D" begin
    problem = EstimationProblem(data2D, grid2D, :value)

    solver = Kriging(
      :value => (variogram=GaussianVariogram(range=35.,nugget=0.),)
    )

    solution = solve(problem, solver)

    # basic checks
    inds = LinearIndices(size(grid2D))
    M, V = solution[:value]
    @test isapprox(M[inds[26,26]], 1., atol=1e-6)
    @test isapprox(M[inds[51,76]], 0., atol=1e-6)
    @test isapprox(M[inds[76,51]], 1., atol=1e-6)

    if visualtests
      gr(size=(800,400))
      @plottest contourf(solution) joinpath(datadir,"GlobalKriging2D.png") !istravis
    end
  end

  @testset "NearestKriging2D" begin
    problem = EstimationProblem(data2D, grid2D, :value)

    solver = Kriging(
      :value => (variogram=GaussianVariogram(range=35.,nugget=0.), maxneighbors=3)
    )

    solution = solve(problem, solver)

    # basic checks
    inds = LinearIndices(size(grid2D))
    M, V = solution[:value]
    @test isapprox(M[inds[26,26]], 1., atol=1e-6)
    @test isapprox(M[inds[51,76]], 0., atol=1e-6)
    @test isapprox(M[inds[76,51]], 1., atol=1e-6)

    if visualtests
      gr(size=(800,400))
      @plottest contourf(solution) joinpath(datadir,"NearestKriging2D.png") !istravis
    end
  end

  @testset "LocalKriging2D" begin
    problem = EstimationProblem(data2D, grid2D, :value)

    solver = Kriging(
      :value => (variogram=GaussianVariogram(range=35.,nugget=0.),
                 maxneighbors=3, neighborhood=BallNeighborhood(100.))
    )

    solution = solve(problem, solver)

    # basic checks
    inds = LinearIndices(size(grid2D))
    M, V = solution[:value]
    @test isapprox(M[inds[26,26]], 1., atol=1e-6)
    @test isapprox(M[inds[51,76]], 0., atol=1e-6)
    @test isapprox(M[inds[76,51]], 1., atol=1e-6)

    if visualtests
      gr(size=(800,400))
      @plottest contourf(solution) joinpath(datadir,"LocalKriging2D.png") !istravis
    end
  end

  @testset "LocalKriging3D_GSLIB" begin
    #= The file `data3D_samples.csv` was obtained from the public repository
    https://github.com/exepulveda/geomet_datasets/blob/master/datasets/porphyry_01/datafiles/synthetic_drillholes.gslib
    where only the following variables were selected: clay, chalcosite, bornite, chalcopyrite.

    The file `data3D_grid.csv` contains the coordinates from the file 
    https://github.com/exepulveda/geomet_datasets/blob/master/datasets/porphyry_01/datafiles/block_model.csv 
    and estimation and variance generated by the GSLIB program k3td (http://www.statios.com/Quick/gslib.html)
    using the same variogram model and search parameters used here. We have kept only the locations with valid
    estimations.
    =# 
    data3D = readgeotable(joinpath(datadir,"data3D_samples.csv"), coordnames=(:x,:y,:z))
    grid3D = domain(readgeotable(joinpath(datadir,"data3D_grid.csv"), coordnames=(:x,:y,:z)))
    
    γ = SphericalVariogram(sill=1.0, range=100.0, nugget=0.2)
    
    problem = EstimationProblem(data3D, grid3D, :clay)
    
    local_kriging = Kriging(
          :clay => (variogram=γ,
                    maxneighbors=16, neighborhood=BallNeighborhood(250.0))
        )
    
    solution = solve(problem, local_kriging)
    
    est, var = solution[:clay]
    
    @test sum((est-grid3D[:estimate]).^2) <= 0.01
    @test sum((var-grid3D[:variance]).^2) <= 0.01
  end
end